
int minimumDifference(vector<int>& nums) {
        int n = nums.size();
        int N = n/2;
        int sum = 0;
        int res = 0;
        sum = accumulate(nums.begin(),nums.end(),0);
        vector<vector<int>>left(N+1),right(N+1);
        //using bit manipulation technique to find all subset sum
        for(int mask = 0; mask < (1<<N); mask++){
            int sz = 0, l = 0, r = 0;
            for(int i = 0; i < N; i++){
                if(mask & (1<<i)){
                    sz++;
                    l+=nums[i];
                    r+=nums[i+N];
                }
            }
            left[sz].push_back(l);
            right[sz].push_back(r);
       }
       for(int sz = 0; sz <= N; sz++){
           sort(right[sz].begin(),right[sz].end());
       }

       res = min(abs(sum - 2*left[N][0]), abs(sum - 2*right[N][0]));

       for(int sz = 1; sz <= N; sz++){
           for(auto &l : left[sz]){
               int r = (sum - 2*l)/2;
               int rsz = N-sz;
               auto &v = right[rsz];
               auto itr = lower_bound(v.begin(),v.end(),r);

               if(itr != v.end()){
                   res = min(res, abs(sum - 2*(l+(*itr))));
               } 
               if(itr != v.begin()){
                   auto it = itr;
                   --it;
                   res = min(res, abs(sum - 2*(l+(*it))));
               }
           }
       }

       return res;

    }
